

//Numeric game board
let gameData;
//    [6, 20, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 7],
//    [0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 10, 12, 0, 10, 10, 10, 10, 0],
//    [0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 1, 1, 4, 10, 1, 7, 10, 0],
//    [0, 10, 0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 0, 10, 0],
//    [0, 10, 0, 10, 0, 10, 5, 1, 1, 1, 4, 10, 0, 10, 8, 1, 10, 0, 10, 0],
//    [0, 10, 10, 10, 0, 10, 0, 10, 10, 10, 0, 10, 0, 10, 10, 10, 10, 10, 10, 0],
//    [5, 1, 1, 10, 0, 10, 0, 10, 0, 10, 0, 10, 8, 1, 3, 1, 10, 6, 1, 4],
//    [0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 10, 12, 0, 10, 10, 0, 12, 0],
//    [0, 10, 6, 1, 9, 10, 0, 10, 0, 10, 0, 10, 1, 1, 4, 10, 1, 9, 10, 0],
//    [0, 10, 0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 10, 0],
//    [0, 10, 0, 10, 0, 10, 8, 1, 3, 1, 9, 10, 0, 10, 0, 10, 1, 7, 10, 0],
//    [0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 10, 10, 0, 10, 0, 10, 10, 0, 10, 0],
//    [0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 8, 1, 10, 0, 10, 0],
//    [0, 12, 0, 10, 10, 10, 0, 10, 10, 10, 0, 12, 0, 10, 10, 10, 10, 0, 13, 0],
//    [8, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 9, 10, 9]
//];

//Will be generated by the game data
let map;

//All the basic elements used in the game
//All the different wall types
const _WALL_0 = 0;
const _WALL_1 = 1;
const _WALL_2 = 2;
const _WALL_3 = 3;
const _WALL_4 = 4;
const _WALL_5 = 5;
const _WALL_6 = 6;
const _WALL_7 = 7;
const _WALL_8 = 8;
const _WALL_9 = 9;

//Map element id for the ground
const _GROUND = 10;

//The rat
const _RAT = 20;

//Cheese  
const _CHESSE = 12;

//Rat trap
const _CONSTANT_RAT_TRAP = 13;

//The random cheese
const _RANDOM_CHEESE = 15;

//Random appearing ratpoison
const _RANDOM_RATPOISON = 16;

//The positons the radom cheese can appear on
const _RANDOM_CHEESE_POS = [{ y: 4, x: 1 },
    { y: 9, x: 3 },
    { y: 7, x: 5 },
    { y: 2, x: 9 },
    { y: 13, x: 8 },
    { y: 9, x: 13 },
    { y: 4, x: 16 },
    { y: 10, x: 5 }];

//The positons the radom ratpoiso can appear on
const _RANDOM_RATPOISON_POS = [{ y: 3, x: 4 },
    { y: 11, x: 6 },
    { y: 7, x: 10 },
    { y: 5, x: 14 },
    { y: 10, x: 15 },
    { y: 6, x: 16 }];

//The positions for the begining of the rat trap1 movment
const _RAT_TRAP_START_MOVMENT = [{ y: 12, x: 18 },
    { y: 11, x: 18 },
    { y: 10, x: 18 },
    { y: 9, x: 18 },
    { y: 9, x: 17 },
    { y: 9, x: 16 },
    { y: 9, x: 15 }];

//The positions for the rat traps movemnt if the rat is on the top
//half of the labyrith
const _RAT_TRAP_TOP_MOVMENT = [{ y: 8, x: 15 },
    { y: 7, x: 15 },
    { y: 7, x: 16 },
    { y: 6, x: 16 },
    { y: 5, x: 16 },
    { y: 5, x: 17 },
    { y: 5, x: 18 },
    { y: 4, x: 18 },
    { y: 3, x: 18 },
    { y: 2, x: 18 },
    { y: 1, x: 18 },
    { y: 1, x: 17 },
    { y: 1, x: 16 },
    { y: 1, x: 15 },
    { y: 2, x: 15 },
    { y: 3, x: 15 },
    { y: 3, x: 16 },
    { y: 4, x: 16 },
    { y: 5, x: 16 },
    { y: 5, x: 15 },
    { y: 5, x: 14 },
    { y: 5, x: 13 },
    { y: 4, x: 13 },
    { y: 3, x: 13 },
    { y: 3, x: 12 },
    { y: 3, x: 11 },//Up eller ner i25
    { y: 2, x: 11 },
    { y: 1, x: 11 },
    { y: 1, x: 10 },
    { y: 1, x: 9 },
    { y: 2, x: 9 },
    { y: 3, x: 9 },
    { y: 3, x: 8 },
    { y: 3, x: 7 },
    { y: 2, x: 7 },
    { y: 1, x: 7 },
    { y: 1, x: 6 },
    { y: 1, x: 5 },
    { y: 2, x: 5 },
    { y: 3, x: 5 },
    { y: 4, x: 5 },
    { y: 5, x: 5 },
    { y: 6, x: 5 },
    { y: 7, x: 5 }, //Change to the other movment path and direction i43
    { y: 7, x: 6 },
    { y: 7, x: 7 },
    { y: 6, x: 7 },
    { y: 5, x: 7 },
    { y: 5, x: 8 },
    { y: 5, x: 9 },
    { y: 6, x: 9 },
    { y: 7, x: 9 },
    { y: 7, x: 10 },
    { y: 7, x: 11 },
    { y: 6, x: 11 },
    { y: 5, x: 11 },
    { y: 4, x: 11 },
    { y: 3, x: 11 }];

//The positions for the rat traps movemnt if the rat is on the lower
//half of the labyrith
const _RAT_TRAP_LOWER_MOVMENT = [{ y: 10, x: 15 },
    { y: 11, x: 15 },
    { y: 11, x: 16 },
    { y: 12, x: 16 },
    { y: 13, x: 16 },
    { y: 13, x: 15 },
    { y: 13, x: 14 },
    { y: 13, x: 13 },
    { y: 12, x: 13 },
    { y: 11, x: 13 },
    { y: 10, x: 13 },
    { y: 9, x: 13 },
    { y: 9, x: 12 }, //
    { y: 9, x: 11 },
    { y: 10, x: 11 },
    { y: 11, x: 11 },
    { y: 11, x: 10 },
    { y: 11, x: 9 },
    { y: 12, x: 9 },
    { y: 13, x: 9 },
    { y: 13, x: 8 },
    { y: 13, x: 7 },
    { y: 12, x: 7 },
    { y: 11, x: 7 },
    { y: 11, x: 6 },
    { y: 11, x: 5 },
    { y: 12, x: 5 },
    { y: 13, x: 5 },
    { y: 13, x: 4 },
    { y: 13, x: 3 },
    { y: 12, x: 3 },
    { y: 11, x: 3 },
    { y: 10, x: 3 },
    { y: 9, x: 3 },
    { y: 9, x: 4 },
    { y: 9, x: 5 },
    { y: 8, x: 5 },
    { y: 7, x: 5 }, //
    { y: 7, x: 6 },
    { y: 7, x: 7 },
    { y: 8, x: 7 },
    { y: 9, x: 7 },
    { y: 9, x: 8 },
    { y: 9, x: 9 },
    { y: 8, x: 9 },
    { y: 7, x: 9 },
    { y: 7, x: 10 },
    { y: 7, x: 11 },
    { y: 8, x: 11 },
    { y: 9, x: 11 }];

//The current array index of the rats movement
let ratTrapIndex = 0;

//Rat direction. If true the index counter is counting up
let ratDirectionIsUp = true;

//
let indexCountDirectionIsUp = true;

//Eaten cheese count
let eatenCheese = 0;

//Eaten random chesse
let eatenRandomCheese = 0;

//The game just started
let isBeginingOfGame = false;

//Keep track of the rat location on the board
let mrRat = {
    x: 1,
    y: 0,
    direction: 'down'
};

//Keep track of the constant rat trap location on the board
let constantRatTrap = {
    x: 18,
    y: 13
};

//The number of lives the player have left
let numberOfLivesLeft = 3;

//Time that has passed in sec
let totalTimeInSec = 0;

//Move to startgame function later on!
//Starts when the game start
var moveRatTrapTimer;

//Function for movin the rat trap
function MoveRatTrap() {

    gameData[constantRatTrap.y][constantRatTrap.x] = _GROUND;

    //If the trap moves over a tile with poison or a random cheese it puts it back.
    switch (gameData[constantRatTrap.y][constantRatTrap.x]) {
        case 15:
            gameData[constantRatTrap.y][constantRatTrap.x] = _RANDOM_CHEESE;
            break;
        case 16:
            gameData[constantRatTrap.y][constantRatTrap.x] = _RANDOM_CHEESE_POS;
            break;
        case 10:
            
            break;
        default:
            break;
    }

    if (isBeginingOfGame) {

        constantRatTrap.y = _RAT_TRAP_START_MOVMENT[ratTrapIndex].y;
        constantRatTrap.x = _RAT_TRAP_START_MOVMENT[ratTrapIndex].x;

        gameData[constantRatTrap.y][constantRatTrap.x] = _CONSTANT_RAT_TRAP;
        ratTrapIndex++;

        if (ratTrapIndex === 6) {
            ratTrapIndex = 0;
            isBeginingOfGame = false;
        }
    }
    else {

        if (ratDirectionIsUp) {

            constantRatTrap.y = _RAT_TRAP_TOP_MOVMENT[ratTrapIndex].y;
            constantRatTrap.x = _RAT_TRAP_TOP_MOVMENT[ratTrapIndex].x;

            if (gameData[constantRatTrap.y][constantRatTrap.x] === 20) {

                TheRatDied();
                return;
            }

            gameData[constantRatTrap.y][constantRatTrap.x] = _CONSTANT_RAT_TRAP;

            if (indexCountDirectionIsUp) {
                ratTrapIndex++;
            }
            else {
                ratTrapIndex--;
            }

            if (ratTrapIndex === 57) {
                indexCountDirectionIsUp = false;
            }

            if (ratTrapIndex === 0) {
                indexCountDirectionIsUp = true;
            }
        }
        else {
            //Add more logic for the trap
        }
    }

    DeleteMap();
    DrawMap();

    moveRatTrapTimer = setTimeout(MoveRatTrap, 250);
}

let randomPoisonTimer;
let lastPosionIndex = 20;

//The functions to put out rat poison on the screen
function DisplayRatPoison() {

    //Gets a random index back to get a random 
    //position in the position array to put out the rat poisin in
    var getIndex = GetRandomNumber(5);

    //Loop do make sure that the poison not appear in the same spot 
    while (getIndex === lastPosionIndex) {
        getIndex = GetRandomNumber(5);
    }

    //Check if it is the start of the game... why?
    //would make seens if I added a else so that the poison only apperad after the first 10sec.
    if (lastPosionIndex != 20) {
        gameData[_RANDOM_RATPOISON_POS[lastPosionIndex].y][_RANDOM_RATPOISON_POS[lastPosionIndex].x] = _GROUND;
    }

    //Add the rat poison to the game data array
    gameData[_RANDOM_RATPOISON_POS[getIndex].y][_RANDOM_RATPOISON_POS[getIndex].x] = _RANDOM_RATPOISON;

    //Delets the current map
    DeleteMap();

    //Draws the new one with the poison in its new position in it
    DrawMap();

    //Set the last index for comparison the next time the function is running
    lastPosionIndex = getIndex;

    //10sec between replacement of the rat poison
    randomPoisonTimer = setTimeout(DisplayRatPoison, 10000);
}


let randomCheeseTimer;
let lastRandomCheeseIndex = 20;

//Function for placing out a cheese randomly every 5sec
function DisplayRandomCheese() {

    var getIndex = GetRandomNumber(7);

    //Loop do make sure that the cheese not appear in the same spot 
    while (getIndex === lastRandomCheeseIndex) {
        getIndex = GetRandomNumber(7);
    }

    //Change the tile to ground when a new cheese is added
    if (lastRandomCheeseIndex != 20) {
        //Remove the last cheese from the board
        gameData[_RANDOM_CHEESE_POS[lastRandomCheeseIndex].y][_RANDOM_CHEESE_POS[lastRandomCheeseIndex].x] = _GROUND;
    }

    //Add the cheese to the game data array
    gameData[_RANDOM_CHEESE_POS[getIndex].y][_RANDOM_CHEESE_POS[getIndex].x] = _RANDOM_CHEESE;

    //Delets the current map
    DeleteMap();

    //Draws the new one with the cheese in its new position in it
    DrawMap();

    //Set the last index for comparison the next time the function is running
    lastRandomCheeseIndex = getIndex;
  
    //5sec between replacement of the cheese
    randomCheeseTimer = setTimeout(DisplayRandomCheese, 5000);
}


//Function to get a random number between 0 and the number put in as a parameter.
function GetRandomNumber(length) {
    var i = Math.floor((Math.random() * length) + 1);

    return i;
}


//This function converts gameData into DOM elements.
function CreateTiles(data) {

    //The DOM elements will be keept in an array
    let tilesArray = [];

    //Check each row
    for (let row of data) {

        //Look at each column in that row.
        for (let col of row) {

            //All game elements are created as div elements
            let tile = document.createElement('div');

            //Assign the class name tile.
            tile.classList.add('tile');

            switch (col) {
                case _WALL_0:
                    tile.classList.add('wall_0');
                    break;
                case _WALL_1:
                    tile.classList.add('wall_1');
                    break;
                case _WALL_2:
                    tile.classList.add('wall_2');
                    break;
                case _WALL_3:
                    tile.classList.add('wall_3');
                    break;
                case _WALL_4:
                    tile.classList.add('wall_4');
                    break;
                case _WALL_5:
                    tile.classList.add('wall_5');
                    break;
                case _WALL_6:
                    tile.classList.add('wall_6');
                    break;
                case _WALL_7:
                    tile.classList.add('wall_7');
                    break;
                case _WALL_8:
                    tile.classList.add('wall_8');
                    break;
                case _WALL_9:
                    tile.classList.add('wall_9');
                    break;
                case _GROUND:
                    tile.classList.add('ground');
                    break;
                case _CHESSE:
                    tile.classList.add('cheese');
                    break;
                case _RAT:
                    tile.classList.add('mrrat');

                    //For the rat we add another class to check the 
                    //direction it`s facing.
                    tile.classList.add(mrRat.direction);
                    break;
                case _CONSTANT_RAT_TRAP:
                    tile.classList.add('const_rat_trap');
                    break;
                case _RANDOM_CHEESE:
                    tile.classList.add('randomCheese');
                    break;
                case _RANDOM_RATPOISON:
                    tile.classList.add('ratPoison');
                    break;
                default:
                    alert("Error: Unknown element!")
                    break;
            }

            //Add the tiles to the array
            tilesArray.push(tile);
        }

        //At the end of each row, we create a <br/> element
        let brTile = document.createElement('br');

        //Add that br element to the tilesArray.
        tilesArray.push(brTile);
    }

    //Return the array of configured tiles.
    return tilesArray;
}


//Function that runs when the rat eats a cheese.
//Handles both "cheese" and "randomCheese"
function EatsCheese(isRandomCheese) {

    if (isRandomCheese) {
        eatenRandomCheese++;
    }
    else {
        eatenCheese++;
    }
    
    RatHappyAudio();

    var points = document.getElementById("spanScore");
    var currentPoints = (eatenCheese * 1000) + (eatenRandomCheese * 2500);

    if (currentPoints < 10000) {
        points.innerHTML = "0" + currentPoints.toString();
    }
    else {
        points.innerHTML = currentPoints.toString();
    }
}


// This function creates a map element, fills it with tiles,
// and adds it to the page.
function DrawMap() {

    map = document.createElement('div');

    let tiles = this.CreateTiles(gameData);

    for (let tile of tiles) {
        map.appendChild(tile);
    }

    document.body.appendChild(map);
}


// This function removes the map element from the page.
function DeleteMap() {
    document.body.removeChild(map);
}

// Each function does the following:
// - set the rats direction so that we show the correct image
// - check to see if we hit a wall
// - if we didn't hit a wall, set rats old location to empty space
// - update the rats location
// - draw mrRat in his new location

function MoveDown()
{
    mrRat.direction = 'down';

    if (gameData[mrRat.y + 1][mrRat.x] >= 10)
    {
        //The rat eats a cheese
        if (gameData[mrRat.y + 1][mrRat.x] === 12) {
            EatsCheese(false);
        }

        //The rats eats a random cheese
        if (gameData[mrRat.y + 1][mrRat.x] === 15) {
            EatsCheese(true);
        }

        //The rat hits the rat poison or rat trap
        if (gameData[mrRat.y + 1][mrRat.x] === 16 || gameData[mrRat.y + 1][mrRat.x] === 13) {
            TheRatDied();
        }

        gameData[mrRat.y][mrRat.x] = _GROUND;
        mrRat.y = mrRat.y + 1;
        gameData[mrRat.y][mrRat.x] = _RAT;

        //MrRat has reached the gool
        if (mrRat.x == 18 && mrRat.y == 14) {
            Goal();
            return;
        }

        DeleteMap();
        DrawMap();
    }
}


function MoveUp() {

    mrRat.direction = 'up';

    if (gameData[mrRat.y - 1][mrRat.x] >= 10)
    {
        //The rat eats a cheese
        if (gameData[mrRat.y - 1][mrRat.x] === 12) {
            EatsCheese(false);
        }

        //The rats eats a random cheese
        if (gameData[mrRat.y - 1][mrRat.x] === 15) {
            EatsCheese(true);
        }

        //The rat hits the rat poison or rat trap
        if (gameData[mrRat.y - 1][mrRat.x] === 16 || gameData[mrRat.y - 1][mrRat.x] === 13) {
            TheRatDied();
        }

        gameData[mrRat.y][mrRat.x] = _GROUND;
        mrRat.y = mrRat.y - 1;
        gameData[mrRat.y][mrRat.x] = _RAT;

        DeleteMap();
        DrawMap();
    }
}


function MoveLeft() {

    mrRat.direction = 'left';

    if (gameData[mrRat.y][mrRat.x - 1] >= 10)
    {
        //The rat eats a cheese
        if (gameData[mrRat.y][mrRat.x - 1] === 12) {
            EatsCheese(false);
        }

        //The rats eats a random cheese
        if (gameData[mrRat.y][mrRat.x - 1] === 15) {
            EatsCheese(true);
        }

        //The rat hits the rat poison or rat trap
        if (gameData[mrRat.y][mrRat.x - 1] === 16 || gameData[mrRat.y][mrRat.x - 1] === 13) {
            TheRatDied();
        }

        gameData[mrRat.y][mrRat.x] = _GROUND;
        mrRat.x = mrRat.x - 1;
        gameData[mrRat.y][mrRat.x] = _RAT;

        DeleteMap();
        DrawMap();
    }
}


function MoveRight() {

    mrRat.direction = 'right';

    if (gameData[mrRat.y][mrRat.x + 1] >= 10)
    {
        //The rat eats a cheese
        if (gameData[mrRat.y][mrRat.x + 1] === 12) {
            EatsCheese(false);
        }

        //The rats eats a random cheese
        if (gameData[mrRat.y][mrRat.x + 1] === 15) {
            EatsCheese(true);
        }

        //The rat hits the rat poison or rat trap
        if (gameData[mrRat.y][mrRat.x + 1] === 16 || gameData[mrRat.y][mrRat.x + 1] === 13) {
            TheRatDied();
        }

        gameData[mrRat.y][mrRat.x] = _GROUND;
        mrRat.x = mrRat.x + 1;
        gameData[mrRat.y][mrRat.x] = _RAT;

        DeleteMap();
        DrawMap();
    }
}


//When the rat reaches the goal
function Goal() {

    //Clear timers
    clearTimeout(timeOutput);
    clearTimeout(randomCheeseTimer);
    clearTimeout(randomPoisonTimer);
    clearTimeout(moveRatTrapTimer);

    //Set all varialbles and display the info popup
    var modal = document.getElementById('modalRatDied');
    var infoText = document.getElementById('modalInfoText');
    var closeTheModal = document.getElementsByClassName("close")[0];
    var timeOut = document.getElementById("time");
    
    infoText.innerHTML = "You reach the goal!<br/>Time: " + timeOut.innerHTML + "<br/>Points: " + GetPlayerScore().toString() + "<br/><br/>";
    closeTheModal.innerHTML = "Play Again?";
    modal.style.display = "block";

    window.onclick = function (event) {
        if (event.target == closeTheModal) {
            location.reload(true);
        }
    }
    
    //Calculate the players total score
    GetPlayerScore();
}


//Calculates the players score
function GetPlayerScore() {

    let displayScore = document.getElementById("spanScore");
    var score = 0;

    if (totalTimeInSec < 180)
    {
    //Remove score for time passed
    score = (18000 - (totalTimeInSec * 100));
    }

    //For each eaten cheese add 100
    score += (eatenCheese * 1000);

    //For each eaten random appearing cheese
    score += (eatenRandomCheese * 2500);

    //Display the score on the screen
    displayScore.innerHTML = score.toString();

    return score;
}


//REMOVE WHEN DONE!!!
// This function sets up the listener for the whole page.
// Specifically, when the user presses a key, we run a function
// that handles that key press.
function KeyboardControls() {

    document.addEventListener('keydown', function (e) {

        // Each time the user moves, we recalculate Mr.Rats location,
        // update the
        if (e.keyCode === 37) {    // left arrow is 37
            MoveLeft();

        } else if (e.keyCode === 38) {  // up arrow is 38
            MoveUp();

        } else if (e.keyCode === 39) {   // right arrow is 39
            MoveRight();

        } else if (e.keyCode === 40) {   // down arrow is 40
            MoveDown();
        }

        // After every move, we erase the map and redraw it.
        DeleteMap();
        DrawMap();
    });
}

//Time variables
let seconds = 0,
    minutes = 0;

//The setTimeout fot the counter.
let timeOutput;

//The time function
function Time() {

    totalTimeInSec++;
    seconds++;

    if (seconds >= 60) {

        seconds = 0;
        minutes++;

        if (minutes >= 60) {

            minutes = 0;
        }
    }

    //Display the time on the screen
    var timeOut = document.getElementById("time");
    timeOut.innerHTML = (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") + ":" + (seconds > 9 ? seconds : "0" + seconds);

    //The timer to the time function
    timeOutput = setTimeout(Time, 1000);
}


//Plays the happy sound
function RatHappyAudio() {
    var ratHappyAudio = document.getElementById("ratHappyAudio");
    ratHappyAudio.play();
} 


//Playse the sad sound
function RatDieAudio() {
    var ratDieAudio = document.getElementById("ratDieAudio");
    ratDieAudio.play();
}


//The rat died
function TheRatDied() {

    var imgOne = document.getElementById("imgLiveNrOne");
    var imgTwo = document.getElementById("imgLiveNrTwo");
    var imgThree = document.getElementById("imgLiveNrThree");

    RatDieAudio();
    numberOfLivesLeft--;

    switch (numberOfLivesLeft) {
        case 0:
            //GAME OVER
            imgOne.src = "Images/Rats/rat_large_dead.png";
            imgTwo.src = "Images/Rats/rat_large_dead.png";
            imgThree.src = "Images/Rats/rat_large_dead.png";
            break;
        case 1:
            imgOne.src = "Images/Rats/rat_large_dead.png";
            imgTwo.src = "Images/Rats/rat_large_dead.png";
            break;
        case 2:
            imgOne.src = "Images/Rats/rat_large_dead.png";
            break;
        default:
            alert("TheRatDied function invalid value in switch statement.");
            break;
    }

    //Clear all timers
    clearTimeout(timeOutput);
    clearTimeout(randomCheeseTimer);
    clearTimeout(randomPoisonTimer);
    clearTimeout(moveRatTrapTimer);

    //Set all varialbles and display the info popup
    var modal = document.getElementById('modalRatDied');
    var infoText = document.getElementById('modalInfoText');
    var closeTheModal = document.getElementsByClassName("close")[0];

    window.onclick = function (event) {
        if (event.target == closeTheModal) {
            modal.style.display = "none";   //TODO!!! What TODO?
            this.DeleteMap();
            ClearGameForRestart();
            StartTheGame();
        }
    }

    if (numberOfLivesLeft === 0) {

        modal.style.display = "block";
        infoText.innerHTML = "GAME OVER<br/><br/>";
        closeTheModal.innerHTML = "Play Again";
    }
    else {

        modal.style.display = "block";
        infoText.innerHTML = "Oooops!!! You died!<br/><br/>";
        closeTheModal.innerHTML = "Continue";
    }
}


//Clear all the variables for restarting the game
function ClearGameForRestart() {

    //Gameboard
    gameData[mrRat.y][mrRat.x] = _GROUND;
    gameData[constantRatTrap.y][constantRatTrap.x] = _GROUND;

    //Clear var
    totalTimeInSec = 0;
    seconds = 0;

    ratTrapIndex = 0;

    //Rat direction. If true the index counter is counting up
    ratDirectionIsUp = true;

    //The count direction
    indexCountDirectionIsUp = true;

    //Eaten cheese count
    eatenCheese = 0;

    //Eaten random chesse
    eatenRandomCheese = 0;

    //The game just started
    isBeginingOfGame = false;

    //Keep track of the rat location on the board
    mrRat.x = 1;
    mrRat.y = 0;
    mrRat.direction = 'down';

    //Set the rat at the beginning of the game
    gameData[mrRat.y][mrRat.x] = _RAT;

    //Keep track of the constant rat trap location on the board
    constantRatTrap.x = 18;
    constantRatTrap.y = 13; 

    gameData[constantRatTrap.y][constantRatTrap.x] = _CONSTANT_RAT_TRAP;

    //The last index of the poison
    lastPosionIndex = 20;

    //The last index of the cheese
    lastRandomCheeseIndex = 20;

    //Clear the points
    var points = document.getElementById("spanScore");
    points.innerHTML = "00000";

    if (numberOfLivesLeft === 0) {
        numberOfLivesLeft = 3;

        var imgOne = document.getElementById("imgLiveNrOne");
        var imgTwo = document.getElementById("imgLiveNrTwo");
        var imgThree = document.getElementById("imgLiveNrThree");

        imgOne.src = "Images/Rats/rat_large.png";
        imgTwo.src = "Images/Rats/rat_large.png";
        imgThree.src = "Images/Rats/rat_large.png";
    }
}


//Start the game
function StartTheGame() {

    this.DrawMap();
    isBeginingOfGame = true;
    //Start the time
    totalTimeInSec = 0;
    Time();
    MoveRatTrap();
    DisplayRatPoison();
    DisplayRandomCheese();
}


//Initialize the game by drawing the map and setting up the
//Keyboard controls.
function Main() {

    //Set the gameDate from another *.js file.
    gameData = gameDataOne;
    this.KeyboardControls();
    StartTheGame();
}


//Initialize the game components.
this.Main();





//function ConstatRatTrap() {

//    var trapMoveRight = { canMove: false, currentY: constantRatTrap.y, newX: (constantRatTrap.x + 1) };
//    var trapMoveLeft = { canMove: false, currentY: constantRatTrap.y, newX: (constantRatTrap.x - 1) };
//    var trapMoveDown = { canMove: false, currentX: constantRatTrap.x, newY: (constantRatTrap.y + 1) };
//    var trapMoveUp = { canMove: false, currentX: constantRatTrap.x, newY: (constantRatTrap.y - 1) };

//    var trapPossibleMovments = [4];

//    var numberOfRoads = 0;

//    ////Down
//    if (gameData[constantRatTrap.y + 1][constantRatTrap.x] >= 10) {
//        trapMoveDown.canMove = true;
//        trapPossibleMovments[0] = trapMoveDown;
//    }

//    //Up
//    if (gameData[constantRatTrap.y - 1][constantRatTrap.x] >= 10) {
//        trapMoveUp.canMove = true;
//        trapPossibleMovments
//    }

//    //Left
//    if (gameData[constantRatTrap.y][constantRatTrap.x - 1] >= 10) {
//        trapMoveLeft.canMove = true;
//        numberOfRoads++;
//    }

//    //Right
//    if (gameData[constantRatTrap.y][constantRatTrap.x + 1] >= 10) {
//        trapMoveRight.canMove = true;
//        numberOfRoads++;
//    }

//    //alert("numberOfRoads:" + numberOfRoads.toString() + "\nnumberOfPosRoadsArray: Down:" + trapMoveDown.canMove.toString() + " Left:" + trapMoveLeft.canMove.toString());

//    //If there is only one way
//    if (numberOfRoads === 1) {

//        if (trapMoveDown.canMove) {
//            MoveRatTrap(trapMoveDown.currentX, trapMoveDown.newY, constantRatTrap);
//        }
//        else if (trapMoveUp.canMove) {
//            MoveRatTrap(trapMoveUp.currentX, trapMoveUp.newY, constantRatTrap);
//        }
//        else if (trapMoveLeft.canMove) {
//            MoveRatTrap(trapMoveLeft.currentY, trapMoveLeft.newX, constantRatTrap);
//        }
//        else if (trapMoveRight.canMove) {
//            MoveRatTrap(trapMoveUp.currentY, trapMoveUp.newX, constantRatTrap);
//        }
//    } //If there is more ways then one to move
//    else {

//    }

//    var ratPosX = mrRat.x;
//    var ratPosY = mrRat.y;

//    ////Is mrRat to the left of the trap
//    //if (mrRat.x < constantRatTrap.x) {
//    //    ratLeft = true;
//    //}
//    //else if (mrRat.x >= constantRatTrap.x) { //To the right
//    //    ratLeft = false;
//    //}

//    ////Is mrRat above the trap
//    //if (mrRat.y < constantRatTrap.y) {
//    //    ratUp = true;
//    //}
//    //else if (mrRat.y >= constantRatTrap.y) { //Belowe the trap
//    //    ratUp = true;
//    //}

//    //var div = document.getElementById("divScreenItem");
//    //div.innerHTML = "Down:" + moveDown.toString() + " Up:" + moveUp.toString() + " Left:" + moveLeft.toString() + " Right:" + moveRight.toString() + "<br/>Rat is left:" + ratLeft.toString() + " Rat is up:" + ratUp.toString();

//        //Check if any of
//        //if (gameData[constantRatTrap.y][trapX] >= 10) {
//        //    gameData[mrRat.y][mrRat.x] = _GROUND;
//        //    constantRatTrap.y = mrRat.y + 1;
//        //    gameData[constantRatTrap.y][constantRatTrap.x] = _CONSTANT_RAT_TRAP;
//        //}
//}